/*
 * Copyright 2020 Realm Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package io.realm.mongodb.sync

/**
 * Class used to encapsulate progress notifications when either downloading or uploading Realm data.
 * Each instance of this class is an immutable snapshot of the current progress.
 *
 * If the [ProgressListener] was registered with [ProgressMode.INDEFINITELY], the progress reported by
 * [.getFractionTransferred] can both increase and decrease since more changes might be added while
 * the progres listener is registered. This means it is possible for one notification to report
 * `true` for [.isTransferComplete], and then on the next event report `false`.
 *
 * If the [ProgressListener] was registered with [ProgressMode.CURRENT_CHANGES], progress can only ever
 * increase, and once [.isTransferComplete] returns `true`, no further events will be generated.
 *
 * @see SyncSession.addDownloadProgressListener
 * @see SyncSession.addUploadProgressListener
 */
data class Progress
/**
 * Creates a snapshot of the current progress when downloading or uploading changes.
 *
 * @param transferredBytes number of bytes transferred.
 * @param transferableBytes total number of bytes that needs to be transferred (including those already transferred).
 */ internal constructor(
    /**
     * Returns the total number of bytes that has been transferred since the [ProgressListener] was added.
     *
     * @return the total number of bytes transferred since the [ProgressListener] was added.
     */
    val transferredBytes: Long,
    /**
     * Returns the total number of transferable bytes (bytes that have been transferred + bytes pending transfer).
     *
     *
     * If the [ProgressListener] is tracking downloads, this number represents the size of the changesets
     * generated by all other clients using the Realm.
     *
     *
     * If the [ProgressListener] is tracking uploads, this number represents the size of changesets created
     * locally.
     *
     * @return the total number of bytes that has been transferred + number of bytes still pending transfer.
     */
    val transferableBytes: Long
) {

    /**
     * The fraction of bytes transferred out of all transferable bytes. Counting from since the [ProgressListener]
     * was added.
     *
     * @return a number between `0.0` and `1.0`, where `0.0` represents that no data has been
     * transferred yet, and `1.0` that all data has been transferred.
     */
    val fractionTransferred: Double
        get() = if (transferableBytes == 0L) {
            1.0
        } else {
            val percentage = transferredBytes.toDouble() / transferableBytes.toDouble()
            if (percentage > 1.0) {
                /*RealmLog.error("Invalid progress state: %s", this)*/
                1.0
            } else {
                percentage
            }
        }

    /**
     * Returns `true` when all pending bytes have been transferred.
     *
     *
     * If the [ProgressListener] was registered with [ProgressMode.INDEFINITELY], this method can return
     * `false` for subsequent events after returning `true`.
     *
     *
     * If the [ProgressListener] was registered with [ProgressMode.CURRENT_CHANGES], when this method
     * returns `true`, no more progress events will be sent.
     *
     * @return `true` if all changes have been transferred, `false` otherwise.
     */
    val transferComplete: Boolean
        get() = transferredBytes >= transferableBytes

}