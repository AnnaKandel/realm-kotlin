public abstract interface class io/realm/BaseRealm : io/realm/Versioned {
	public abstract fun getConfiguration ()Lio/realm/RealmConfiguration;
	public abstract fun getNumberOfActiveVersions ()J
	public abstract fun isClosed ()Z
}

public final class io/realm/LogConfiguration {
	public fun <init> (Lio/realm/log/LogLevel;Ljava/util/List;)V
	public final fun component1 ()Lio/realm/log/LogLevel;
	public final fun component2 ()Ljava/util/List;
	public final fun copy (Lio/realm/log/LogLevel;Ljava/util/List;)Lio/realm/LogConfiguration;
	public static synthetic fun copy$default (Lio/realm/LogConfiguration;Lio/realm/log/LogLevel;Ljava/util/List;ILjava/lang/Object;)Lio/realm/LogConfiguration;
	public fun equals (Ljava/lang/Object;)Z
	public final fun getLevel ()Lio/realm/log/LogLevel;
	public final fun getLoggers ()Ljava/util/List;
	public fun hashCode ()I
	public fun toString ()Ljava/lang/String;
}

public abstract interface class io/realm/MutableRealm : io/realm/TypedRealm {
	public abstract fun cancelWrite ()V
	public abstract fun copyToRealm (Lio/realm/RealmObject;)Lio/realm/RealmObject;
	public abstract fun delete (Lio/realm/RealmObject;)V
	public abstract fun findLatest (Lio/realm/RealmObject;)Lio/realm/RealmObject;
	public abstract fun objects (Lkotlin/reflect/KClass;)Lio/realm/RealmResults;
}

public abstract interface class io/realm/Queryable {
	public abstract fun query (Ljava/lang/String;[Ljava/lang/Object;)Lio/realm/RealmResults;
}

public final class io/realm/Queryable$DefaultImpls {
	public static synthetic fun query$default (Lio/realm/Queryable;Ljava/lang/String;[Ljava/lang/Object;ILjava/lang/Object;)Lio/realm/RealmResults;
}

public abstract interface class io/realm/Realm : io/realm/TypedRealm {
	public static final field Companion Lio/realm/Realm$Companion;
	public static final field DEFAULT_FILE_NAME Ljava/lang/String;
	public static final field DEFAULT_LOG_TAG Ljava/lang/String;
	public static final field ENCRYPTION_KEY_LENGTH I
	public abstract fun close ()V
	public abstract fun objects (Lkotlin/reflect/KClass;)Lio/realm/RealmResults;
	public abstract fun observe ()Lkotlinx/coroutines/flow/Flow;
	public abstract fun write (Lkotlin/jvm/functions/Function1;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;
	public abstract fun writeBlocking (Lkotlin/jvm/functions/Function1;)Ljava/lang/Object;
}

public final class io/realm/Realm$Companion {
	public static final field DEFAULT_FILE_NAME Ljava/lang/String;
	public static final field DEFAULT_LOG_TAG Ljava/lang/String;
	public static final field ENCRYPTION_KEY_LENGTH I
	public final fun open (Lio/realm/RealmConfiguration;)Lio/realm/Realm;
}

public abstract interface class io/realm/RealmConfiguration {
	public static final field Companion Lio/realm/RealmConfiguration$Companion;
	public abstract fun getDeleteRealmIfMigrationNeeded ()Z
	public abstract fun getEncryptionKey ()[B
	public abstract fun getLog ()Lio/realm/LogConfiguration;
	public abstract fun getMaxNumberOfActiveVersions ()J
	public abstract fun getName ()Ljava/lang/String;
	public abstract fun getPath ()Ljava/lang/String;
	public abstract fun getSchema ()Ljava/util/Set;
	public abstract fun getSchemaVersion ()J
}

public final class io/realm/RealmConfiguration$Builder {
	public fun <init> ()V
	public fun <init> (Ljava/lang/String;Ljava/lang/String;Ljava/util/Set;)V
	public synthetic fun <init> (Ljava/lang/String;Ljava/lang/String;Ljava/util/Set;ILkotlin/jvm/internal/DefaultConstructorMarker;)V
	public final fun build ()Lio/realm/RealmConfiguration;
	public final fun deleteRealmIfMigrationNeeded ()Lio/realm/RealmConfiguration$Builder;
	public final fun encryptionKey ([B)Lio/realm/RealmConfiguration$Builder;
	public final fun getName ()Ljava/lang/String;
	public final fun getPath ()Ljava/lang/String;
	public final fun getSchema ()Ljava/util/Set;
	public final fun log (Lio/realm/log/LogLevel;Ljava/util/List;)Lio/realm/RealmConfiguration$Builder;
	public static synthetic fun log$default (Lio/realm/RealmConfiguration$Builder;Lio/realm/log/LogLevel;Ljava/util/List;ILjava/lang/Object;)Lio/realm/RealmConfiguration$Builder;
	public final fun maxNumberOfActiveVersions (J)Lio/realm/RealmConfiguration$Builder;
	public static synthetic fun maxNumberOfActiveVersions$default (Lio/realm/RealmConfiguration$Builder;JILjava/lang/Object;)Lio/realm/RealmConfiguration$Builder;
	public final fun name (Ljava/lang/String;)Lio/realm/RealmConfiguration$Builder;
	public final fun path (Ljava/lang/String;)Lio/realm/RealmConfiguration$Builder;
	public final fun schema (Ljava/util/Set;)Lio/realm/RealmConfiguration$Builder;
	public final fun schema ([Lkotlin/reflect/KClass;)Lio/realm/RealmConfiguration$Builder;
	public final fun schemaVersion (J)Lio/realm/RealmConfiguration$Builder;
	public final fun setName (Ljava/lang/String;)V
	public final fun setPath (Ljava/lang/String;)V
	public final fun setSchema (Ljava/util/Set;)V
}

public final class io/realm/RealmConfiguration$Companion {
	public final fun with (Ljava/lang/String;Ljava/lang/String;Ljava/util/Set;)Lio/realm/RealmConfiguration;
	public static synthetic fun with$default (Lio/realm/RealmConfiguration$Companion;Ljava/lang/String;Ljava/lang/String;Ljava/util/Set;ILjava/lang/Object;)Lio/realm/RealmConfiguration;
}

public abstract interface class io/realm/RealmList : java/util/List, kotlin/jvm/internal/markers/KMutableList {
	public abstract fun observe ()Lkotlinx/coroutines/flow/Flow;
}

public final class io/realm/RealmListKt {
	public static final fun realmListOf ([Ljava/lang/Object;)Lio/realm/RealmList;
	public static final fun toRealmList (Ljava/lang/Iterable;)Lio/realm/RealmList;
}

public abstract interface class io/realm/RealmObject {
}

public final class io/realm/RealmObjectKt {
	public static final fun delete (Lio/realm/RealmObject;)V
	public static final fun isFrozen (Lio/realm/RealmObject;)Z
	public static final fun isManaged (Lio/realm/RealmObject;)Z
	public static final fun isValid (Lio/realm/RealmObject;)Z
	public static final fun observe (Lio/realm/RealmObject;)Lkotlinx/coroutines/flow/Flow;
	public static final fun version (Lio/realm/RealmObject;)Lio/realm/VersionId;
}

public abstract interface class io/realm/RealmResults : io/realm/Queryable, io/realm/Versioned, java/util/List, kotlin/jvm/internal/markers/KMappedMarker {
	public abstract fun delete ()V
	public abstract fun observe ()Lkotlinx/coroutines/flow/Flow;
	public abstract fun query (Ljava/lang/String;[Ljava/lang/Object;)Lio/realm/RealmResults;
}

public abstract interface class io/realm/TypedRealm : io/realm/BaseRealm {
	public abstract fun objects (Lkotlin/reflect/KClass;)Lio/realm/RealmResults;
}

public final class io/realm/VersionId : java/lang/Comparable {
	public fun <init> (J)V
	public fun compareTo (Lio/realm/VersionId;)I
	public synthetic fun compareTo (Ljava/lang/Object;)I
	public final fun component1 ()J
	public final fun copy (J)Lio/realm/VersionId;
	public static synthetic fun copy$default (Lio/realm/VersionId;JILjava/lang/Object;)Lio/realm/VersionId;
	public fun equals (Ljava/lang/Object;)Z
	public final fun getVersion ()J
	public fun hashCode ()I
	public fun toString ()Ljava/lang/String;
}

public abstract interface class io/realm/Versioned {
	public abstract fun version ()Lio/realm/VersionId;
}

public abstract interface annotation class io/realm/annotations/Ignore : java/lang/annotation/Annotation {
}

public abstract interface annotation class io/realm/annotations/Index : java/lang/annotation/Annotation {
}

public abstract interface annotation class io/realm/annotations/PrimaryKey : java/lang/annotation/Annotation {
}

public final class io/realm/log/LogLevel : java/lang/Enum {
	public static final field ALL Lio/realm/log/LogLevel;
	public static final field DEBUG Lio/realm/log/LogLevel;
	public static final field ERROR Lio/realm/log/LogLevel;
	public static final field INFO Lio/realm/log/LogLevel;
	public static final field NONE Lio/realm/log/LogLevel;
	public static final field TRACE Lio/realm/log/LogLevel;
	public static final field WARN Lio/realm/log/LogLevel;
	public static final field WTF Lio/realm/log/LogLevel;
	public static fun valueOf (Ljava/lang/String;)Lio/realm/log/LogLevel;
	public static fun values ()[Lio/realm/log/LogLevel;
}

public abstract interface class io/realm/log/RealmLogger {
	public abstract fun getTag ()Ljava/lang/String;
	public abstract fun log (Lio/realm/log/LogLevel;Ljava/lang/Throwable;Ljava/lang/String;[Ljava/lang/Object;)V
}

